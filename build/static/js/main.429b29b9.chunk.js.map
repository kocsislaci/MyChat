{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","displayKey","src","width","onClick","href","preventDefault","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","loggedIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.429b29b9.chunk.js","sourcesContent":["import { IncomingPacket, OutgoingPacket, InboxDto, MessageDto } from './chat.d';\nimport { EventProducer } from './EventProducer';\n\ninterface ProxyEventMap\n{\n    \"login\": () => void;\n    \"message\": ( channelId: string, message: MessageDto ) => void;\n    \"conversation\": ( channelId: string ) => void;\n}\n\nclass Proxy extends EventProducer<ProxyEventMap> \n{\n    private ws: WebSocket;\n    inbox: InboxDto | null = null;\n    constructor() {\n        super();\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\n        this.ws.addEventListener( \"open\", () => \n        {\n//            this.ws.send( \"Hello\" ); \n        } );\n        this.ws.addEventListener( \"message\", e =>\n        {\n            let p = <IncomingPacket>JSON.parse( e.data );\n            switch ( p.type )\n            {\n                case \"error\":\n                    alert( p.message );\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch( \"login\" );\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\n                    this.dispatch( \"message\", cid, p.message );\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push( p.conversation );\n                    this.dispatch( \"conversation\", p.conversation.channelId );\n                    break;\n            }\n        } );\n    } \n        sendPacket( packet: OutgoingPacket )\n        {\n            this.ws.send( JSON.stringify( packet ) ); \n    }\n}\n\n    export var proxy = new Proxy();","export class EventProducer<M>\n{\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\n    addEventListener<K extends keyof M>( type: K, listener: M[K], obj?: Object )\n    {\n        this.listeners.push( { type, listener, obj } );\n    }\n    removeEventListener<K extends keyof M>( type: K, listener: M[K] )\n    {\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\n    }\n    protected dispatch<K extends keyof M>( type: K, ...args )\n    {\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\n        listener.listener.call( listener.obj, ...args );\n    }\n    removeAllEventListener<K extends keyof M>( obj: Object )\n    {\n        if ( !obj )\n            throw new Error( \"Must specify object\" );\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\n    }\n}\n","import React, { Component } from \"react\";\nimport './TextInput.css';\n\n\nexport interface TextInputOptions\n{\n    value?: string;\n    onChange?: ( value: string ) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n};\nexport class TextInput extends Component<TextInputOptions>\n{\n    state = { value: this.props.value, focus: false };\n    render()\n    {\n        let attrs = {} as any;\n        if ( this.props.autofocus )\n            attrs.autoFocus = true;\n        if ( this.props.onEnter )\n            attrs.onKeyDown = e =>\n            {\n                if ( e.keyCode === 13 )\n                    this.props.onEnter!();\n            };\n        return (\n            <div className=\"text-input\">\n                <input {...attrs} type={ this.props.type ?? \"text\" } value={ this.state.value }\n                    onChange={ e =>\n                    {\n                        this.setState( { value: e.target.value } );\n                        this.props.onChange?.( e.target.value );\n                    } }\n                    onBlur={ () => this.setState( { focus: false } ) }\n                    onFocus={ () => this.setState( { focus: true } ) } />\n                <div className=\"focus-indicator\"></div>\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\n                    { this.props.placeholder }\n                </label>\n            </div> ); \n    }\n}\nexport interface TextInputAndButtonOptions extends TextInputOptions\n{\n    buttonContent?: string;\n    onClick?: ( text: string ) => boolean | void;\n}\n\n\n\n","import React, { Component } from 'react';\nimport { proxy } from './Proxy';\nimport { TextInput } from './TextInput';\n\nexport class Login extends Component\n{\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n    displayKey = \"\";  \n    render() {\n        return (\n            <div className=\"login\">\n                <img src=\"logo512.png\" width=\"256\" />\n                {this.state.register &&\n                    <input type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\n                        onChange={e => this.setState({ displayName: e.target.value })} />}\n               <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" \n                                    value={this.state.email} \n                                    onChange={e => \n                                    {\n                                        this.displayKey = e;\n                                        if(e == \"IG72OK\")\n                                        {\n                                            this.state.displayName = \"Kocsis Laszlo\";                                               \n                                        }\n                                        this.setState({email: e})}\n                                    }\n                                    onEnter={() => this.onClick()} autofocus={true}/>   \n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\n                        {this.state.register ? \"Login\" : \"Register\"} </a>\n                </p>\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n            </div>);\n    }\n    onClick(){\n        if ( this.state.register )\n        {\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false} );\n            this.setState({register: false});\n        }\n        else\n        {\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false } );            \n        }\n    }\n}","import { TextInputAndButtonOptions, TextInput } from './TextInput';\nimport React, { Component } from 'react';\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> {\n    textInput = React.createRef<TextInput>();\n    onClick() {\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\n        this.textInput.current?.setState({ value: \"\" });\n    }\n    render() {\n        return (\n            <div className=\"text-input-and-button\">\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.props.buttonContent}\n                </button>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { ConversationDto } from \"./chat.d\";\nimport { proxy } from \"./Proxy\";\n\nexport class ConversationCard extends Component<{\n        conversation: ConversationDto,\n        selected: boolean,\n        onSelect: () => void\n    }>\n    {\n    render()\n    {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\n            this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\n        return (\n            <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\n                onClick={ () => this.props.onSelect() }>\n                <div className=\"row\">\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\n                    <span className=\"time\">\n                        { lastMessage && new Date( lastMessage.timeStamp ).toLocaleDateString() }\n                    </span>\n                </div>\n                <span className=\"last-message\">{ lastMessage?.content }</span>\n            </div>\n        );\n    }\n    componentDidMount()\n    {\n        proxy.addEventListener( \"message\", ( cid, m ) =>\n        {\n        if ( cid === this.props.conversation.channelId )\n        this.forceUpdate();\n        }, this );\n    }\n    componentWillUnmount()\n    {\n        proxy.removeAllEventListener( this );\n    }\n}","import React, { Component } from 'react';\nimport { InboxDto, ConversationDto } from \"./chat.d\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { proxy } from \"./Proxy\";\nimport { ConversationCard } from \"./ConversationCard\";\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\n    onSelect: ( c: ConversationDto ) => void\n}>\n{\n    render()\n    {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={ text => this.sendContactRequest( text ) } />\n                <div className=\"conversations\">\n                    { this.props.inbox.conversations.map( x =>\n                        <ConversationCard\n                            key={ x.channelId }\n                            conversation={ x }\n                            selected={ x === this.props.selectedConversation }\n                            onSelect={ () => this.props.onSelect( x ) } /> ) }\n                </div>\n            </div>\n        );\n    }\n    sendContactRequest( email: string )\n    {\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\n        return true;\n    }\n    componentDidMount()\n    {\n        proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\n    }\n    componentWillUnmount()\n    {\n        proxy.removeAllEventListener( this );\n    }\n}","import React, { PureComponent } from \"react\";\nimport { MessageDto } from \"./chat.d\";\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\n{\n    render()\n    {\n        return (\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\n                <div className=\"bubble\">\n                    <span className=\"text\">{ this.props.message.content }</span>\n                    <span className=\"time\">\n                        { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { ConversationDto } from \"./chat.d\";\nimport { proxy } from \"./Proxy\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { MessageCard } from \"./MessageCard\";\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\n{\n    componentDidMount()\n    {\n        proxy.addEventListener( \"message\", ( cid, m ) =>\n        {\n        if ( cid === this.props.conversation?.channelId )\n            this.forceUpdate();\n        }, this );\n    }\n    componentWillUnmount()\n    {\n        proxy.removeAllEventListener( this );\n    }\n    onSend( text: string )\n    {\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"I: \"+text } );\n        return true;\n    }\n    render()\n    {\n        return (\n            <div className=\"right-pane column\">\n                <div className=\"conversation-header row\">\n                    <button type=\"button\" className=\"only-narrow\"\n                        onClick={ () => this.props.onBack() }>Back</button>\n                    <p>{ this.props.conversation?.name }</p>\n                </div>\n                { this.props.conversation &&\n                    <>\n                        <div className=\"messages\">\n                            { this.props.conversation?.lastMessages.map( x =>\n                                <MessageCard key={ x.id } message={ x }\n                                    own={ x.senderId === proxy.inbox?.user.id } /> ) }\n                        </div>\n                        <div className=\"send-message row\">\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                                buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\n                        </div>\n                    </>\n                }\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { ConversationDto } from './chat.d';\nimport { proxy } from './Proxy';\nimport { LeftPane } from \"./LeftPane\";\nimport { RightPane } from \"./RightPane\";\n\nexport class Main extends Component\n{\n    state = { selectedConversation: undefined as ( ConversationDto | undefined ) };\n    render()\n    {\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\n        return (\n            <div className={ className }>\n                <LeftPane\n                    inbox={ proxy.inbox! }\n                    selectedConversation={ this.state.selectedConversation }\n                    onSelect={ c => this.setState( { selectedConversation: c } ) } />\n                <RightPane conversation={ this.state.selectedConversation }\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\n            </div>\n        );\n    }\n}","import './App.css';\nimport React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main'\nimport { proxy } from './Proxy';\n\nexport default class App extends Component\n{\n  state = {loggedIn: false}\n  render()\n  {\n    return (\n      <div className=\"app\">\n        {this.state.loggedIn ? <Main />:<Login />}\n      </div>\n    );\n  }\n  componentDidMount(){\n    proxy.addEventListener(\"login\", () =>{\n      this.setState({loggedIn: true});\n    }, this);\n  }\n\n  componentWillUnmount(){\n    proxy.removeAllEventListener(this);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}